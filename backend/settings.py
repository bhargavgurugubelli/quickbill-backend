"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'k@0(vgggl139$$91q50gfdu%lq8)%*gp@0!(v16l=iyz(m6zrw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['.railway.app', 'quickbill-backend-production.up.railway.app', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'jazzmin',                          # Optional: modern admin UI
    'django.contrib.admin',
    'django.contrib.auth',             # ✅ Required for admin login
    'django.contrib.contenttypes',     # ✅ Required for models & admin
    'django.contrib.sessions',         # ✅ Required for admin sessions
    'django.contrib.messages',         # ✅ Admin uses messages framework
    'django.contrib.staticfiles',

    # Third-party
    'rest_framework',
    'corsheaders',

    # Your backend apps
    'subscriptions.apps.SubscriptionsConfig',
    'auth_style',
    'hero',
    'pricing',
    'contact',
    'footer',
    'sales',
    'kitchen',
    'accounts',
    'authotp',
]

AUTH_USER_MODEL = 'accounts.CustomUser'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'allauth.account.auth_backends.AuthenticationBackend',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],  # ✅ For custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static", "custom"),
# ]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'custom': {
            'format': '[%(levelname)s. %(name)s, (line #%(lineno)d) - %(asctime)s] %(message)s'
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        }
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler"
        },
        'logfile': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'log/backend.log'),
            'formatter': 'custom',
            'level': 'DEBUG',
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    "loggers": {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'subscriptions': {
            'handlers': ['console', 'logfile'],
            'level': 'DEBUG',
        },
        'emails': {
            'handlers': ['console', 'logfile'],
            'level': 'DEBUG',
        },
    }
}

# CORS
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
]

# Custom Admin
INDEX_TITLE = "QuickBill"
SITE_TITLE = "API Portal"
SITE_HEADER = "QuickBill API"

# Razorpay
RAZORPAY_KEY_ID = 'rzp_test_jLGV7FNBhLoV1C'
RAZORPAY_KEY_SECRET = 'KXdLiq13VAK1d0vKYrTgkH7P'

# Django Allauth redirects
LOGIN_REDIRECT_URL = 'http://localhost:3000/dashboard'
ACCOUNT_SIGNUP_REDIRECT_URL = 'http://localhost:3000/pricing-table'
ACCOUNT_LOGOUT_REDIRECT_URL = 'http://localhost:3000/'

# Email
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
AWS_SES_ACCESS_KEY_ID = os.environ.get('AWS_SES_ACCESS_KEY_ID')
AWS_SES_SECRET_ACCESS_KEY = os.environ.get('AWS_SES_SECRET_ACCESS_KEY')
AWS_REGION_NAME = os.environ.get('AWS_REGION_NAME')



# Jazzmin
JAZZMIN_SETTINGS = {
    "site_logo": "",
    "copyright": "Fortynx",
}
